
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

    <title>Starter Template for NodeJs Web App</title>

    <!-- Bootstrap core CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/main.css" rel="stylesheet">

  </head>

  <body>

    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Project name</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#wan">Button1</a></li>
            <li><a href="#too">Button2</a></li>
            <li><a href="#phree">Button3</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

    <div class="container">
      <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
       <div id="player">


       </div>
       <div id ="player-controls" >
         <button type="button" class="btn btn-default" aria-label="Left Align" style="float:left;" onClick="player.playVideo();">
           <span class="glyphicon glyphicon-play" aria-hidden="true"></span>
         </button>
         <button type="button" class="btn btn-default" aria-label="Left Align" style="float:left;" onClick="player.pauseVideo();">
             <span class="glyphicon glyphicon-pause" aria-hidden="true"></span>
         </button>
         <div id = "progressBar" style="width :550px;height : 35px;margin-left :10px;float :left;">
          <div id = "line" style="border-style:solid; border-width:1px; position:relative; top:50%"></div>
          <div id = "square" style="width:15px; height:15px;top:20%; border-style:solid; position:relative; border-width:1px"></div>
         </div>
       </div>


    </div><!-- /.container -->


    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="js/jquery.min.js"><\/script>')</script>
    <script src="js/bootstrap.min.js"></script>

    <script>
    progressBarLoop();
    function seek(event){
      var clickOffset = evt.pageX - $('#progressBar').offset().left;
        console.log(clickOffset);

    }

     function progressBarLoop(){
       var progressBar = $("#progressBar");
       var progressSlider = $("#square");
       progressBar.click(function(event){
         if(player==null || progressBar == null){
           return;
         }
         var original = $(this).offset().left;
         var divOffset = event.pageX - $(this).offset().left;
         var fraction = (divOffset)/original*100;
         progressSlider.css("left",fraction.toString()+"%");
         console.log(fraction*player.getDuration());
         player.seekTo(fraction*player.getDuration()/100,true);
       });
       setInterval(function(){
         if(player==null || progressBar==null){
           return;
         }
         var fraction = player.getCurrentTime()/player.getDuration()*100;
         progressSlider.css("left",fraction.toString()+"%");
       });

     }


    </script>
    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '480',
          width: '640',
          videoId: 'XZmGGAbHqa0',
          playerVars: { 'autoplay': 1, 'controls': 0 },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }

        });
      }


      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>


  </body>
</html>
